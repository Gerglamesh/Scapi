// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SCAPI_Frontend.Context;

namespace SCAPI_Frontend.Migrations
{
    [DbContext(typeof(ScapiContext))]
    [Migration("20201003135953_Add_CheckConstraintForChordType_ChangeFrom_Owned_To_OneToOne")]
    partial class Add_CheckConstraintForChordType_ChangeFrom_Owned_To_OneToOne
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SCAPI_Frontend.Models.ChordDiagramModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChordId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChordId")
                        .IsUnique();

                    b.ToTable("ChordDiagrams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChordId = 1,
                            Path = "Does not exist yet"
                        },
                        new
                        {
                            Id = 2,
                            ChordId = 2,
                            Path = "Does not exist yet"
                        },
                        new
                        {
                            Id = 3,
                            ChordId = 3,
                            Path = "Does not exist yet"
                        },
                        new
                        {
                            Id = 4,
                            ChordId = 4,
                            Path = "Does not exist yet"
                        });
                });

            modelBuilder.Entity("SCAPI_Frontend.Models.ChordModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChordType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FretPosition")
                        .HasColumnType("int");

                    b.Property<int>("StartString")
                        .HasColumnType("int");

                    b.Property<string>("TriadType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Chords");

                    b.HasCheckConstraint("CK_ChordModel_ChordType", "[ChordType] IN ('Open', 'Barré')");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseNote = "C",
                            ChordType = "Open",
                            FretPosition = 3,
                            StartString = 5,
                            TriadType = "Major"
                        },
                        new
                        {
                            Id = 2,
                            BaseNote = "C",
                            ChordType = "Barré",
                            FretPosition = 3,
                            StartString = 5,
                            TriadType = "Major"
                        },
                        new
                        {
                            Id = 3,
                            BaseNote = "C",
                            ChordType = "Barré",
                            FretPosition = 8,
                            StartString = 6,
                            TriadType = "Major"
                        },
                        new
                        {
                            Id = 4,
                            BaseNote = "C",
                            ChordType = "Barré",
                            FretPosition = 10,
                            StartString = 4,
                            TriadType = "Major"
                        });
                });

            modelBuilder.Entity("SCAPI_Frontend.Models.ChordDiagramModel", b =>
                {
                    b.HasOne("SCAPI_Frontend.Models.ChordModel", "Chord")
                        .WithOne("ChordDiagram")
                        .HasForeignKey("SCAPI_Frontend.Models.ChordDiagramModel", "ChordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
